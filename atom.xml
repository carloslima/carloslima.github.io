<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[carlos@blog ~/notes>]]></title>
  <link href="http://blog.carloslima.name/atom.xml" rel="self"/>
  <link href="http://blog.carloslima.name/"/>
  <updated>2013-10-16T04:27:14+08:00</updated>
  <id>http://blog.carloslima.name/</id>
  <author>
    <name><![CDATA[Carlos Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git submodules: how (not) to use it.]]></title>
    <link href="http://blog.carloslima.name/blog/2013/10/16/git-submodules-how-not-to-use-it/"/>
    <updated>2013-10-16T01:35:00+08:00</updated>
    <id>http://blog.carloslima.name/blog/2013/10/16/git-submodules-how-not-to-use-it</id>
    <content type="html"><![CDATA[<h1>Intro (or What&rsquo;s a git submodule?)</h1>

<p>On our system, /dev/SuperFoo/sub-bar is a submodule of SuperFoo.git repository.</p>

<pre><code>carlos@carlosdev /d/SuperFoo (master)&gt; git log -1
commit c2abbad057a02a2bd0d7c1e1c74048da6ef88234
Author: Chuck Norris &lt;chuck@example.com&gt;
Date:   Thu Oct 10 02:35:16 2013 +0000

    Updated to latest translation
</code></pre>

<p>&nbsp;</p>

<pre><code>carlos@carlosdev /d/SuperFoo (master)&gt; cd sub-bar
carlos@carlosdev /d/S/sub-bar ((2279a91))&gt; git log -1
commit 2279a9187b023f79cf274f52a76fe5059f119914
Merge: fc57e1a a3110e8
Author: Chuck Norris &lt;chuck@example.com&gt;
Date:   Thu Oct 10 02:24:15 2013 +0000

    Merge branch 'master' into currenttranslations
</code></pre>

<h1>so what?</h1>

<p>They are disconnected, despite being shown/accessible as a regular subdirectory of your main project.</p>

<h2>again?</h2>

<pre><code>carlos@carlosdev /d/SuperFoo (master)&gt; vi sub-bar/templates/home/login.html.haml cgi/fooish.cgi
..(change change change)..
carlos@carlosdev /d/SuperFoo (master)&gt; git status

# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#       modified:   sub-bar (modified content)
#       modified:   cgi/fooish.cgi
#
no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>

<p>sub-bar/ files <em>are not</em> part of your repository!</p>

<p>Look again:</p>

<pre><code>carlos@carlosdev /d/SuperFoo (master)&gt; git diff
diff --git a/sub-bar b/sub-bar
--- a/sub-bar
+++ b/sub-bar
@@ -1 +1 @@
-Subproject commit 2279a9187b023f79cf274f52a76fe5059f119914
+Subproject commit 2279a9187b023f79cf274f52a76fe5059f119914-dirty
diff --git a/cgi/fooish.cgi b/cgi/fooish.cgi
index c607f79..2b1ce17 100755
--- a/cgi/fooish.cgi
+++ b/cgi/fooish.cgi
@@ -1,4 +1,3 @@
-#!/usr/bin/perl

 use strict;
 use warnings;
carlos@carlosdev /d/SuperFoo (master)&gt; 
</code></pre>

<h1>Ok, got it. But what&rsquo;s the deal? (or, What could possibly go wrong?)</h1>

<p>This <em>happened</em> before, more than once. Not hypothetical.</p>

<pre><code>carlos@carlosdev /d/SuperFoo (bugfixes)&gt; git status
# On branch bugfixes
# Your branch is behind 'origin/bugfixes' by 1813 commits, and can be fast-forwarded.
#
nothing to commit (working directory clean)

carlos@carlosdev /d/SuperFoo (bugfixes)&gt; git rebase -p
Successfully rebased and updated refs/heads/bugfixes.
</code></pre>

<p>All good. Let&rsquo;s go fix our ticket!</p>

<pre><code>carlos@carlosdev /d/SuperFoo (bugfixes)&gt; vi lib/README.txt 
carlos@carlosdev /d/SuperFoo (bugfixes)&gt; git diff
diff --git a/sub-bar b/sub-bar
index 8b6fa45..eac1423 160000
--- a/sub-bar
+++ b/sub-bar
@@ -1 +1 @@
-Subproject commit 8b6fa45a258e37293d472c81844a3c37e921b6f9
+Subproject commit eac1423fcb1812e0ff958712231dddc06687733c
diff --git a/lib/README.txt b/lib/README.txt
index 293a71f..e9a6e01 100644
--- a/lib/README.txt
+++ b/lib/README.txt
@@ -1,4 +1,4 @@
 This directory holds shared code between all sub-projects. Please keep it clean.

-See https://internal.example.com/wiki/code-rules
+See https://example.thirdparty-inthecloud.net/wiki/code-rules
</code></pre>

<p>Looks good, simple enough.</p>

<pre><code>carlos@carlosdev /d/SuperFoo (bugfixes)&gt; git commit -am 'Fix wrong url'
[bugfixes 9ecfc7d] Fix wrong url
 2 files changed, 2 insertions(+), 2 deletions(-)
</code></pre>

<p>Cheers! We just rolled back sub-bar by 1 month.</p>

<pre><code>carlos@carlosdev /d/S/sub-bar ((eac1423))&gt; git log -1 8b6fa45a258e37293d472c81844a3c37e921b6f9
commit 8b6fa45a258e37293d472c81844a3c37e921b6f9
Author: Michelle Yeoh &lt;mi@example.com&gt;
Date:   Thu Oct 3 11:52:38 2013 +0000

    Translated using Weblate (Portuguese)

    Currently translated at 100.0% (448 of 448 strings)
</code></pre>

<p>&nbsp;</p>

<pre><code>carlos@carlosdev /d/S/sub-bar ((eac1423))&gt; git log -1 eac1423fcb1812e0ff958712231dddc06687733c
commit eac1423fcb1812e0ff958712231dddc06687733c
Author: Angelina Jolie &lt;angie@example.com&gt;
Date:   Mon Sep 2 02:10:57 2013 +0000

    Tidy
</code></pre>

<p>Next time bugfixes gets released, the version of sub-bar in production will be from 1 month ago.</p>

<p>Not just minor changes..</p>

<pre><code>carlos@carlosdev /d/S/sub-bar ((eac1423))&gt; git diff --stat eac1423..8b6fa45
.. snip ..
78 files changed, 5871 insertions(+), 1435 deletions(-)
</code></pre>

<h1>Why did that happen?</h1>

<p>Because it is a separate repository, git only tracks three things about the submodule:</p>

<ul>
<li>url of the external repository</li>
<li>path where the files will be put/cloned</li>
<li>the commit id from that repository that you want to use.</li>
</ul>


<p>They are:</p>

<pre><code>carlos@carlosdev /d/SuperFoo (bugfixes)&gt; cat .gitmodules
[submodule "sub-bar"]
    path = sub-bar
    url = git@bitbucket.org:exampledotcom/sub-bar.git

carlos@carlosdev /d/SuperFoo (bugfixes)&gt; git ls-tree bugfixes
..snip..
100644 blob 2d918f0b794c059d6900e7211cd34e22aa395a77    Makefile   ← file
040000 tree 486d5dafd1d4fd7ff4f8cf3b273d5912e84666ae    api        ← directory
160000 commit eac1423fcb1812e0ff958712231dddc06687733c  sub-bar    ← submodule (commit id to use)
..snip..
</code></pre>

<p>When we did the rebase, the changes included updates to the version of sub-bar that the SuperFoo repository should be using.<br/>
But git <em>DOES NOT</em> checkout that new version inside the sub-bar directory.</p>

<p>Git knows we should be using commit 8b6fa45<br/>
But on sub-bar directory we have eac1423 (from before the rebase)</p>

<p>It doesn&rsquo;t know (or care) if the commits are newer, older, etc.<br/>
So, when we did <code>git commit -am'...'</code> without paying attention to that sub-bar mention that appeared on <code>git diff</code> or <code>git status</code>, we told git that we want it to use commit eac1423, which is what we have checked out at the moment.</p>

<h1>This is really confusing. I don&rsquo;t care about sub-bar and I&rsquo;m not touching it, how do I avoid breaking things?</h1>

<p>First and foremost, when <code>git status</code> or <code>git diff</code> shows sub-bar, <em>do not ignore it</em>.</p>

<p>The root cause is that when you move your repository to a different state, git won&rsquo;t automatically move the submodule to the new expected commit.<br/>
So we fix it with <code>git submodule update</code>.</p>

<p>The name might be counter-intuitive, but <code>git submodule update</code> doesn&rsquo;t change/write/commit/push the submodule, it just runs a checkout of the expected commit.</p>

<p>Second, don&rsquo;t <code>git add sub-bar</code>;<br/>
(Unless updating the submodule to a new version is what you&rsquo;re trying to do.)</p>

<h2>Caveats</h2>

<h3>Bitbucket</h3>

<p>Bitbucket (as of 2013-10-10) won&rsquo;t show changes to submodules on their diff.<br/>
That means reviewers won&rsquo;t be able to see that you made a mistake!</p>

<h3>git commit -a / git commit .</h3>

<p>Please, don&rsquo;t do it. Ever.<br/>
This will happily commit every change you have on disk.<br/>
It is an horrible practice, much more dangerous when submodules are involved.<br/>
Always review your changes with <code>git status</code> and <code>git diff</code>.<br/>
Don&rsquo;t commit anything you didn&rsquo;t mean to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[method_missing and respond_to?: doing it properly]]></title>
    <link href="http://blog.carloslima.name/2010/03/methodmissing-and-respondto-doing-it.html"/>
    <updated>2010-03-09T00:00:00+08:00</updated>
    <id>http://blog.carloslima.name/2010/03/method-missing-and-respond-to-doing-it-properly</id>
    <content type="html"><![CDATA[<div class='post'>
<style>pre.blackboard {   font-size:13px;   line-height:1; } pre.blackboard .LatexSupport {    color: #FBDE2D; } pre.blackboard .OcamlInfixOperator {    color: #8DA6CE; } pre.blackboard .MetaFunctionCallPy {    color: #BECDE6; } pre.blackboard .Superclass {    color: #FF6400;    font-style: italic; } pre.blackboard .Constant {    color: #D8FA3C; } pre.blackboard {    background-color: #0C1021;    color: #F8F8F8; } pre.blackboard .OcamlFPConstant {    text-decoration: underline; } pre.blackboard .OcamlFPInfixOperator {    text-decoration: underline; } pre.blackboard .Support {    color: #8DA6CE; } pre.blackboard .OcamlOperator {    color: #F8F8F8; } pre.blackboard .Storage {    color: #FBDE2D; } pre.blackboard .line-numbers {    background-color: #253B76;    color: #FFFFFF; } pre.blackboard .StringInterpolation {    color: #FF6400; } pre.blackboard .InvalidIllegal {    background-color: #9D1E15;    color: #F8F8F8; } pre.blackboard .PlistUnquotedString {    color: #FFFFFF; } pre.blackboard .OcamlVariant {    color: #D5E0F3; } pre.blackboard .MetaTag {    color: #7F90AA; } pre.blackboard .LatexEnvironment {    background-color: #F7F7F8; } pre.blackboard .OcamlFPPrefixOperator {    text-decoration: underline; } pre.blackboard .OcamlPrefixOperator {    color: #8DA6CE; } pre.blackboard .EntityNameSection {    color: #FFFFFF; } pre.blackboard .String {    color: #61CE3C; } pre.blackboard .Keyword {    color: #FBDE2D; } pre.blackboard .LatexEnvironmentNested {    background-color: #7691F3; } pre.blackboard .InvalidDeprecated {    color: #AB2A1D;    font-style: italic; } pre.blackboard .Variable { } pre.blackboard .Entity {    color: #FF6400; } pre.blackboard .Comment {    color: #AEAEAE; } </style><br />Sometime ago while using method_missing to implement some functionality I got the weird behavior that it would work only <em>most</em> of the time but not always.<br />In retrospect it&#8217;s now pretty obvious but in the heat of the moment it took me about half a day of investigation and talking before I figured it out.<br /><br />What happened is that I did only half of the work.<br />I defined method_missing but I forgot to define respond_to? accordingly.<br />The result is that it worked when I called it directly on the instance, but failed if an association was involved.<br /><br />To give an example, say you have a class like this:<br /><br /><pre class="blackboard"><span class="Keyword">class</span> <span class="Entity">A<span class="Superclass"> <span class="Superclass">&lt;</span> ActiveRecord::Base</span></span><br />  <span class="Keyword">def</span> <span class="Entity">example</span><br />    <span class="Constant">true</span><br />  <span class="Keyword">end</span><br /><br />  <span class="Keyword">def</span> <span class="Entity">method_missing</span>(<span class="Variable">method<span class="Variable">,</span> <span class="Keyword">*</span>args</span>)<br />    <span class="Keyword">if</span> method.<span class="Entity">to_s</span> <span class="Keyword">=~</span> <span class="String"><span class="String">/</span></span><span class="String">example</span><span class="String"><span class="String">/</span></span><br />      example<br />    <span class="Keyword">else</span><br />      <span class="Keyword">super</span><br />    <span class="Keyword">end</span><br />  <span class="Keyword">end</span><br /><span class="Keyword">end</span><br /></pre><br />Calling *example* directly on your instance works just fine.<br /><code>&gt;&gt; <span class="bright">A.new.my_example</span><br />=&gt; true<br /><br />&gt;&gt; <span class="bright">A.create!.example_me?</span><br />=&gt; true<br /></code><br /><br />All fine, but as soon as you get an association in the middle of things:<br /><br /><pre class="blackboard"><span class="Keyword">class</span> <span class="Entity">B<span class="Superclass"> <span class="Superclass">&lt;</span> ActiveRecord::Base</span></span><br />  <span class="Support">belongs_to</span> <span class="Constant"><span class="Constant">:</span>a</span><br /><span class="Keyword">end</span><br /></pre><br />It just doesn&#8217;t go well anymore:<br /><br /><code>&gt;&gt; <span class="bright">b = B.new(:a=&gt;A.new)</span><br />=&gt; #&lt;B id: nil, a_id: nil, created_at: nil, updated_at: nil&gt;<br /><br />&gt;&gt; <span class="bright">b.a.example?</span><br />NoMethodError: undefined method `example?' for #&lt;A id: nil, created_at: nil, updated_at: nil&gt;<br />from /var/lib/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations/association_proxy.rb:220:in `method_missing'<br />from (irb):55<br /><br />&gt;&gt; <span class="bright">b = B.create!(:a=&gt;A.create!)</span><br />=&gt; #&lt;B id: 4, a_id: 7, created_at: "2010-03-08 21:15:01", updated_at: "2010-03-08 21:15:01"&gt;<br />&gt;&gt; <span class="bright">b.a.failing_example</span><br />NoMethodError: undefined method `failing_example' for #&lt;ActiveRecord::Associations::BelongsToAssociation:0xb70491d0&gt;<br />from /var/lib/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations/association_proxy.rb:220:in `method_missing'<br />from (irb):57<br /></code><br /><br />Now, this last error is a bit clearer but I don&#8217;t remember running into it at the time.<br />If I had just followed the association_proxy:220 hint right away&#8230; ;)<br /><br />What happens is that b.a doesn&#8217;t return the instance but rather an <a href="http://apidock.com/rails/ActiveRecord/Associations/AssociationProxy">AssociationProxy</a> instance that provides ActiveRecord&#8217;s extended functionality and this proxy relies on A#respond_to? to correctly forward method calls to the actual instance.<br /><br />What I should have done is:<br /><br /><pre class="blackboard"><span class="Keyword">class</span> <span class="Entity">A<span class="Superclass"> <span class="Superclass">&lt;</span> ActiveRecord::Base</span></span><br />  <span class="Keyword">def</span> <span class="Entity">example</span><br />    <span class="Constant">true</span><br />  <span class="Keyword">end</span><br /><br />  <span class="Keyword">def</span> <span class="Entity">method_missing</span>(<span class="Variable">method<span class="Variable">,</span> <span class="Keyword">*</span>args</span>)<br />    <span class="Keyword">if</span> method.<span class="Entity">to_s</span> <span class="Keyword">=~</span> <span class="String"><span class="String">/</span></span><span class="String">example</span><span class="String"><span class="String">/</span></span><br />      example<br />    <span class="Keyword">else</span><br />      <span class="Keyword">super</span><br />    <span class="Keyword">end</span><br />  <span class="Keyword">end</span><br /><br />  <span class="Keyword">def</span> <span class="Entity">respond_to?</span>(<span class="Variable">method<span class="Variable">,</span> include_private <span class="Keyword">=</span> <span class="Constant">false</span></span>)<br />    <span class="Keyword">if</span> method.<span class="Entity">to_s</span> <span class="Keyword">=~</span> <span class="String"><span class="String">/</span></span><span class="String">example</span><span class="String"><span class="String">/</span></span><br />      <span class="Constant">true</span><br />    <span class="Keyword">else</span><br />      <span class="Keyword">super</span><br />    <span class="Keyword">end</span><br />  <span class="Keyword">end</span><br /><span class="Keyword">end</span><br /></pre><br /><code>>> <span class="bright">B.create!(:a=>A.create!).a.example?</span><br />=> true<br />>> <span class="bright">B.new(:a=>A.new).a.failing_example</span><br />=> true<br /></code><br /><br />There are some much better write-ups on this topic, if you want to read more:<br /><a href="http://technicalpickles.com/posts/using-method_missing-and-respond_to-to-create-dynamic-methods/">Using method_missing and respond_to? to create dynamic methods</a><br /><a href="http://coderrr.wordpress.com/2008/07/11/solving-the-method_missing-respond_to-problem/">Solving the method_missing/respond_to? problem</a><br /><br /><br />Now, I must be honest here: what I was doing was a <b>big</b> code smell :)<br />It taught me the lesson to use method_missing properly and was even quite fun to debug and all that but what I really needed and end up doing in that case was a group of <a href="http://apidock.com/rails/Module/delegate">delegates</a> here and there and voilà, it was all cool and clean.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutionatic Pair Programming]]></title>
    <link href="http://blog.carloslima.name/2010/03/solutionatic-pair-programming.html"/>
    <updated>2010-03-02T00:00:00+08:00</updated>
    <id>http://blog.carloslima.name/2010/03/solutionatic-pair-programming</id>
    <content type="html"><![CDATA[<div class='post'>
<h1>Remote Pair Programming</h1>A few weeks ago, <a href="http://www.knowing.net">Larry O&#8217;Brien</a> and I set out to experiment with Remote Pair Programming.<br />He wrote about it on his SDTimes column: <a href="http://www.sdtimes.com/WINDOWS__NET_WATCH_PROBLEMATIC_PAIR_PROGRAMMING/By_Larry_O_Brien/About_EXTREMEPROGRAMMING/34158">Windows & .NET Watch: Problematic pair programming</a><br /><br />We both liked the experience and would be rather happy to be able to work on a long term project that way (anyone hiring a remote pair?), but since his column gives more emphasis to the down sides, I thought I could write my point of view which is more on the up side ;)<br /><br />In general, I agree on the down sides but I got so excited with the advantages I saw that I would barely remember mentioning the problems if asked.<br /><br /><h2>The focus</h2><br />Working in pair forces you to focus on the work.<br />There is just no way you can be there and not be paying attention to whatever it is that you&#8217;re supposed to do.<br />You get so focused in the work and the communication that the environmental noise that would otherwise annoy you just seem to disappear.<br />The speed in which you make progress can vary with a lot of factors but you are *guaranteed* to make some progress. All. The. Time.<br /><br /><h2>The challenge</h2><br />The fact that someone is watching your every step means that you keep challenging yourself to do things the best way you can.<br />You just can&#8217;t look sloppy to your pair.<br />That means you avoid cutting corners or knowingly doing the wrong thing out of laziness or &#8220;to fix it later&#8221;.<br />If you do something that feels wrong, you&#8217;ll be called on it and have to defend your point, so, unless it&#8217;s worth the trouble, you just work a bit harder and go for the right thing.<br /><br /><h2>The safety feeling</h2><br />You certainly feel more confident about every line of code you write.<br />Anything absurdly wrong will surely get catch by one or the other.<br />Even the small errors or typos get spotted really fast.<br />Sure, things can still be wrong, bugged or bad designed but the fact that the code was co-created and reviewed by at least one more person gives you a comforting feeling.<br /><br /><h2>The learning</h2><br />Working with someone else full time means you&#8217;re continuously learning or at least exercising a different approach than your own.<br />You learn new tricks.<br />You get to defend your points.<br />And you question everything.<br />At the end of the day, you feel actively improving in many things.<br />Even your English, if you&#8217;re not a native speaker ;)<br /><br /><h2>The loneliness</h2><br />Working remotely means you&#8217;re almost always alone.<br />When your clients are in different countries, thousands of miles away, that&#8217;s guaranteed.<br />It&#8217;s just too expensive, time consuming and a tiresome task to travel for a meeting.<br />If there is something I miss every now and then it&#8217;s having someone at close reach that I can share work stuff and work together.<br />Working in a pair was a comforting step in that direction.<br /><br /><h2>The results</h2><br />We shared the resulting project on Github.<br />If you&#8217;d like to poke around, it&#8217;s available at <a href="http://github.com/carloslima/pasteme">http://github.com/carloslima/pasteme</a><br /><br />Overall, I consider it was a big win over the solo experience.<br />There is only one thing that could be much better and that&#8217;s the IDE/Tools support.<br />While sharing a VM using VNC mostly worked, it didn&#8217;t come close to the experience you get when you use Saros, Bespin or even Google Wave.<br />Being able to use all your monitors, drag windows around and organize it the way you like better would definitely improve the experience.<br /><br />Have a different opinion or want to suggest a different tool?<br />Just drop me a comment!</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSnapshot-style backups on Dreamhost]]></title>
    <link href="http://blog.carloslima.name/2010/03/rsnapshot-style-backups-on-dreamhost.html"/>
    <updated>2010-03-02T00:00:00+08:00</updated>
    <id>http://blog.carloslima.name/2010/03/rsnapshot-style-backups-on-dreamhost</id>
    <content type="html"><![CDATA[<div class='post'>
<h1>DHSnapshot</h1>A while ago I needed to find a good setup for backing up some machines.<br /><br />I wanted to use <a href="http://samba.anu.edu.au/rsync/">RSync</a> to do <a href="http://www.mikerubel.org/computers/rsync_snapshots/">snapshots-like backups</a>.<br /><br />This setup is:<br />* Off-site<br />* Storage efficient (the bulk of my backup was unlikely to ever change)<br />* Network efficient (only transfer changed files)<br />* Keeps versions going back a few months<br /><br />Now, <a href="http://www.dreamhost.com">DreamHost</a> offers 50GB of free space for personal backups and that seemed a good fit for this particular situation.<br /><br />Then I found <a href="http://rsnapshot.org/">RSnapshot</a> and it was exactly what I needed.<br />Unfortunately, RSnapshot doesn&#8217;t backup to an external server. <br />It&#8217;s meant to work in a setup where the server hosting the backups connects to your data sources and pull the files.<br />That totally makes sense and is probably the best setup but it wouldn&#8217;t work for me.<br /><br />DreamHost doesn&#8217;t have RSnapshot installed on their backup servers and the only access users have to that machine is SFTP and RSync. <br />I needed something that would work with just that.<br /><br />I came across a post about <a href="http://blog.wangling.me/2009/07/meta-backup-dreamhost-on-dreamhost-backups/">backing up DreamHost websites to DreamHost Backups</a> that showed a workaround to the lack of SSH access to the backups service.<br /><br />So I took the idea, mixed it up with the stuff I wanted from RSnapshot and wrote a small perl script to do it.<br /><br />It&#8217;s called <a href="http://github.com/carloslima/dhsnapshot">dhsnapshot</a> and is published at GitHub: <a href="http://github.com/carloslima/dhsnapshot">http://github.com/carloslima/dhsnapshot</a> <br /><br />At this moment, it&#8217;s not very flexible: it&#8217;s hardwired to keep 7 daily, 4 weekly and 6 monthly backups and it&#8217;s also limited to a single backup source (you can only point it to one source directory)<br />But it&#8217;s not hard to change, or even make it configurable.<br />I might do it if I ever get the need or motivation :)<br /><br />One way or the other, it should be reasonably simple to setup (<a href="http://github.com/carloslima/dhsnapshot#readme">instructions on GitHub</a>).<br /><br />I&#8217;d be glad to know if it helped anyone.<br />So, please, drop me a comment if you fnd it useful.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosting your GIT repository on DreamHost]]></title>
    <link href="http://blog.carloslima.name/2010/02/hosting-your-git-repository-on.html"/>
    <updated>2010-02-25T00:00:00+08:00</updated>
    <id>http://blog.carloslima.name/2010/02/hosting-your-git-repository-on-dreamhost</id>
    <content type="html"><![CDATA[<div class='post'>
<h1>GIT on DreamHost</h1>A few weeks ago I needed a private remote <a href="http://git-scm.com/">Git</a> repository.<br />Since I already have a <a href="http://www.dreamhost.com/">DreamHost</a> account, I didn&#8217;t want to pay for <a href="http://github.com/">GitHub</a> just to be able to set my repository as private.<br /><br />DreamHost does not officially support Git on their Web Panel, so you must set things up manually.<br /><br />There is a <a href="http://wiki.dreamhost.com/Git">Git entry on their Wiki</a> but it looked a bit messy, so I decided to write a cleaner tutorial.<br /><br />Keep in mind that I&#8217;m using <a href="http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt">WebDAV</a>.<br />It allows more than one user to push to the same repository, but it&#8217;s also slower.<br /><br /><blockquote>You can use SSH but it&#8217;s a lot more complex to setup.<br />If that&#8217;s what you want, read the <a href="http://wiki.dreamhost.com/Git#Setup_Three">DreamHost Wiki</a>.</blockquote><br /><h2>Setup a WebDAV folder</h2><br />Login to <a href="https://panel.dreamhost.com/">DreamHost Web Panel</a><br />Go to <a href="https://panel.dreamhost.com/index.cgi?tree=goodies.webdav">Goodies -&gt; Htaccess/WebDAV</a><br />Select the domain name you want to use<br />Click &#8220;Set Up A New Directory&#8221;<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_pF4K13ZAfbQ/S4Yfy5jNCfI/AAAAAAAAAXY/Vqd9oGuy0fE/s1600-h/DH+Webpanel_.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="400" src="http://1.bp.blogspot.com/_pF4K13ZAfbQ/S4Yfy5jNCfI/AAAAAAAAAXY/Vqd9oGuy0fE/s400/DH+Webpanel_.png" width="380" /></a></div><div style="clear: left;"></div><br /><h2>Create the remote repository</h2><br />Git cannot create the remote repository, it only operates on existing ones, so we need to create an empty repository locally and manually upload it to DreamHost.<br /><br />So, there we go, open a console and..<br /><br /><code><br />carlos@ubuntu:~/dev$ <span class="bright">mkdir blank.git</span><br />carlos@ubuntu:~/dev$ <span class="bright">cd blank.git/</span><br />carlos@ubuntu:~/dev/blank.git$ <span class="bright">git --bare init</span><br />Initialized empty Git repository in /home/carlos/dev/blank.git/<br />carlos@ubuntu:~/dev/blank.git$ <span class="bright">touch git-daemon-export-ok</span><br />carlos@ubuntu:~/dev/blank.git$ <span class="bright">git --bare update-server-info</span><br />carlos@ubuntu:~/dev/blank.git$ <span class="bright">mv hooks/post-update.sample hooks/post-update</span><br />carlos@ubuntu:~/dev/blank.git$<br /></code><br /><br /><h3>Upload the blank repository and rename it</h3><br />Use Nautilus or any other file manager that supports WebDAV to upload blank.git to Dreamhost and rename it to something meaningful. For the purpose of this example, let&#8217;s call it project.git<br /><br />On Ubuntu:<br /><a href="http://1.bp.blogspot.com/_pF4K13ZAfbQ/S4YgZnD29DI/AAAAAAAAAXg/Z0EGxSx4f38/s1600-h/Places-Connect.png" imageanchor="1"><img border="0" src="http://1.bp.blogspot.com/_pF4K13ZAfbQ/S4YgZnD29DI/AAAAAAAAAXg/Z0EGxSx4f38/s320/Places-Connect.png" /></a><br /><br /><a href="http://3.bp.blogspot.com/_pF4K13ZAfbQ/S4Ygd4NfomI/AAAAAAAAAXo/nkqv0FMXgow/s1600-h/Screenshot-Connect+to+Server.png" imageanchor="1"><img border="0" src="http://3.bp.blogspot.com/_pF4K13ZAfbQ/S4Ygd4NfomI/AAAAAAAAAXo/nkqv0FMXgow/s320/Screenshot-Connect+to+Server.png" /></a><br /><br /><a href="http://4.bp.blogspot.com/_pF4K13ZAfbQ/S4YtU_dAeqI/AAAAAAAAAXw/-Ki88LByn2k/s1600-h/copy_files.png" imageanchor="1"><img border="0" src="http://4.bp.blogspot.com/_pF4K13ZAfbQ/S4YtU_dAeqI/AAAAAAAAAXw/-Ki88LByn2k/s320/copy_files.png" /></a><br /><br /><a href="http://2.bp.blogspot.com/_pF4K13ZAfbQ/S4YtZGj9uoI/AAAAAAAAAX4/H2S4t9YeXzA/s1600-h/copy_files2.png" imageanchor="1"><img border="0" src="http://2.bp.blogspot.com/_pF4K13ZAfbQ/S4YtZGj9uoI/AAAAAAAAAX4/H2S4t9YeXzA/s320/copy_files2.png" /></a><br /><div style="clear: left;"></div><br />After it finishes uploading, rename the folder from blank.git to project.git<br /><br /><blockquote>When I renamed the file, I got an error message saying it failed, but refreshing showed it actually worked.</blockquote><br /><h2>Ready!</h2><br />If you&#8217;re starting fresh and all you need is a blank repository, then you&#8217;re set. <br />Just clone your repository and start working!<br /><br /><code><br />carlos@ubuntu:~/dev$ <span class="bright">git clone http://bob@www.example.com/git/project.git</span><br />Initialized empty Git repository in /home/carlos/dev/project/.git/<br />Password: <br />warning: You appear to have cloned an empty repository.<br />carlos@ubuntu:~/dev$ <span class="bright">cd project</span><br />carlos@ubuntu:~/dev/project$ (work, work, work)<br />carlos@ubuntu:~/dev/project$ <span class="bright">git add README</span><br />carlos@ubuntu:~/dev/project$ <span class="bright">git commit -m "your commit message"</span><br />[master (root-commit) 5bbe5f6] your commit message<br />0 files changed, 0 insertions(+), 0 deletions(-)<br />create mode 100644 README<br />carlos@ubuntu:~/dev/project$ <span class="bright">git push origin master</span><br />Password: <br />Fetching remote heads...<br />refs/<br />refs/tags/<br />refs/heads/<br />updating 'refs/heads/master'<br />from 0000000000000000000000000000000000000000<br />to   5bbe5f6507fa39293bdc9674ca4ae2e0a1d2f15e<br />sending 3 objects<br />done<br />Updating remote server info<br />carlos@ubuntu:~/dev/project$ <span class="bright">git pull</span><br />Password: <br />From http://bob@www.example.com/git/project<br />* [new branch]      master     -&gt; origin/master<br />Already up-to-date.<br />carlos@ubuntu:~/dev/project (master)$<br /></code><br /><br /><h2>Optional: Push your project repository to DreamHost</h2><br />Otherwise, if you already have a project repository that you&#8217;ve been working locally, now is the time to push it to DreamHost.<br /><br />Instead of cloning the new repository, push your project there first:<br /><br /><code><br />carlos@ubuntu:~/dev$ <span class="bright">cd real_project/</span><br />carlos@ubuntu:~/dev/real_project$ <span class="bright">git config remote.upload.url http://bob@www.example.com/git/project.git/</span><br /><span class="note"><br />It is important to put the last '/'; Without it, the server will send a redirect which git-http-push does not (yet) understand, and git-http-push will repeat the request infinitely.<br /></span><br /><br />carlos@ubuntu:~/dev/real_project$ <span class="bright">git push upload master</span><br />Password: <br />Fetching remote heads...<br />refs/<br />refs/tags/<br />refs/heads/<br />updating 'refs/heads/master'<br />from 0000000000000000000000000000000000000000<br />to   a10703d8e400ca9df1b19345975718935c083905<br />sending 107 objects<br />done<br />Updating remote server info<br />carlos@ubuntu:~/dev/real_project$<br /></code><br /><br />Then confirm it worked and start fresh by cloning it.<br /><br /><code><br />carlos@ubuntu:~/dev/real_project$ <span class="bright">cd ..</span><br />carlos@ubuntu:~/dev$ <span class="bright">git clone http://bob@www.example.com/git/project.git/</span><br />Initialized empty Git repository in /home/carlos/dev/project/.git/<br />Password: <br />got a10703d8e400ca9df1b19345975718935c083905<br />walk a10703d8e400ca9df1b19345975718935c083905<br />got 574596c4cc435461515aa1a4c3cdd0e93af947f3<br />got 067f993be7432ac27e8a6e9636dea53dcc3d8632<br />got 475be0881778acd2de7404175fa323823e4d1ac0<br />walk 067f993be7432ac27e8a6e9636dea53dcc3d8632<br />(...)<br />got b7b5d32db9dd30c9ea28434b125781eb4a3e95b2<br />carlos@ubuntu:~/dev$ <span class="bright">cd project/</span><br />carlos@ubuntu:~/dev/project$ <span class="bright">git log --oneline</span><br />a10703d Adds a beautiful whitespace! :)<br />067f993 Adds project description.. or sort of<br />80c2e22 removes rerun.txt<br />07e3cd2 Initial commit<br />carlos@ubuntu:~/dev/project$ <span class="bright">git pull</span><br />Password: <br />Already up-to-date.<br />carlos@ubuntu:~/dev/project$ <span class="bright">git push origin master</span><br />Password: <br />Fetching remote heads...<br />refs/<br />refs/tags/<br />refs/heads/<br />'refs/heads/master': up-to-date<br />carlos@ubuntu:~/dev/project$ <br /></code><br /><br />And you&#8217;re good to resume working on your project :)<br /><br /><h2>Bonus: saving your WebDAV password</h2><br />Now, if you&#8217;re thinking that typing the WebDAV password over and over again kind of suck, you can save it so that git won&#8217;t ask you anymore.<br /><br /><code>carlos@ubuntu:~/dev$ <span class="bright">echo "machine www.example.com login bob password secret" &gt;&gt; ~/.netrc</span></code><br /><br />There is only one thing to keep in mind.<br />When you save your password like this, you need to drop the <br /><pre style="display: inline;">bob@  </pre>from the urls.<br />So, instead of referring to your repository as <br /><pre>http://bob@www.example.com/git/project.git/</pre>you need to use just <br /><pre>http://www.example.com/git/project.git/</pre><br />If you do this after you finished everything and cloned your repository, then git will have already saved the &#8220;wrong&#8221; url into its config file and will keep asking you for the password.<br /><br />To fix this you can either clone again using the correct url or fix git&#8217;s config manually by doing:<br /><code><br />carlos@ubuntu:~/dev/project$ <span class="bright">git config remote.origin.url http://www.example.com/git/project.git/</span><br />carlos@ubuntu:~/dev/project$<br /></code><br /><br /><br />Now, just for reference :)<br /><code><br />carlos@ubuntu:~/dev$ more /etc/issue.net <br />Ubuntu 9.10<br />carlos@ubuntu:~/dev$ git --version<br />git version 1.6.3.3<br />carlos@ubuntu:~/dev$ date<br />Thu Feb 25 08:55:18 BRT 2010<br />carlos@ubuntu:~/dev$<br /></code></div>
]]></content>
  </entry>
  
</feed>
