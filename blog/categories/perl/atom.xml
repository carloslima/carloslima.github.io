<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | carlos@blog ~/notes>]]></title>
  <link href="http://blog.carloslima.name/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://blog.carloslima.name/"/>
  <updated>2014-07-11T02:47:00+08:00</updated>
  <id>http://blog.carloslima.name/</id>
  <author>
    <name><![CDATA[Carlos Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Perl Workers on Iron.IO]]></title>
    <link href="http://blog.carloslima.name/blog/2013/11/05/running-perl-workers-on-iron-dot-io/"/>
    <updated>2013-11-05T00:37:00+08:00</updated>
    <id>http://blog.carloslima.name/blog/2013/11/05/running-perl-workers-on-iron-dot-io</id>
    <content type="html"><![CDATA[<p>Despite not being listed as an option on their documentation, it is possible to run <a href="http://www.perl.org/">perl</a> on their <a href="http://www.iron.io/worker">IronWorker</a> service.</p>

<blockquote><p>TL;DR (or Show Me The Code): <a href="https://github.com/carloslima/iron-play">working example, full sources</a>.</p></blockquote>

<h1>Quick start</h1>

<h2>IronWorkerNG (their upload/management tool)</h2>

<p>We will need their management tool to upload code.</p>

<pre><code>gem install iron_worker_ng
</code></pre>

<h2>The credentials</h2>

<p>IronWorkerNG reads the credentials from a file named <code>iron.json</code>.<br/>
To get it, we need to login to <a href="https://hud.iron.io/dashboard,">https://hud.iron.io/dashboard,</a> click on the key-icon and download <code>iron.json</code> to the root directory of the project.</p>

<h2>Resolving dependencies on CPAN modules</h2>

<p>Iron.IO doesn&rsquo;t come with any perl module other than what is in <a href="http://perldoc.perl.org/5.14.2/index-modules-A.html">core</a>, so we need to bring in all our dependencies.</p>

<p>For that we will use <a href="https://metacpan.org/pod/Carton">Carton</a></p>

<pre><code>$ cpanm -nq Carton   # install carton
</code></pre>

<p>add our dependencies to <code>cpanfile</code></p>

<pre><code>$ cat cpanfile
requires 'Data::Printer';
requires 'File::Slurp';
requires 'Mojolicious';
</code></pre>

<p>and install them to a ./local/ directory</p>

<pre><code>$ carton install
</code></pre>

<h2>Seting up the worker</h2>

<p>The configuration for the worker is defined in a <code>&lt;service&gt;.worker</code> file, so we create a simple one that tells it to run our perl script and to upload our dependencies (generated by Carton, above) together with the code.</p>

<pre><code>$ cat iron-pl.worker
runtime 'perl'
exec 'iron-pl.pl'
dir 'local/lib/perl5'
</code></pre>

<p>This will upload our code together with the <code>./local/lib/perl5</code> directory (as <code>./perl5</code> on their system)</p>

<p>For more information, check the <a href="http://dev.iron.io/worker/reference/dotworker/">.worker documentation</a>.</p>

<h2>Writing the code!</h2>

<p>This is what will be run when you schedule some tasks.<br/>
We can go crazy on that one, but here I&rsquo;d like to highlight just a few things:</p>

<pre><code>#!/usr/bin/env perl
use 5.010; use utf8; use strict; use warnings;
(...)

use lib 'perl5';
</code></pre>

<p>We need to load the dependencies from the local directory, thus the <code>use lib</code> above.</p>

<pre><code>(...)
my %args = @ARGV;
</code></pre>

<p>They pass arguments as <code>('-d', '/task/', '-e', 'production', '-id', '5277ca9ed16f93360109d0aa', '-payload', '/task/task_payload.json')</code> so we can load them as a Hash and access it as <code>$args{-d}</code> :&ndash;)</p>

<p>The data passed from the scheduled task to the worker comes in a <code>.json</code> file, so we need to parse that</p>

<pre><code>my $payload = Mojo::JSON-&gt;new-&gt;decode( read_file($args{-payload}) );
</code></pre>

<p>For more info (and executable code), check the <a href="https://github.com/carloslima/iron-play">full sources</a> on github.</p>

<h2>Deploy</h2>

<p>With all pieces ready, we can upload the code to their platform using their management tool.</p>

<pre><code>$ iron_worker upload iron-pl.worker
    ------&gt; Creating client
            Project 'ironing-board' with id='5277a2b987a3b90005000044'
    ------&gt; Creating code package
            Found workerfile with path='iron-pl.worker'
            Detected exec with path='iron-pl.pl' and args='{}'
            Merging dir with path='local/lib/perl5' and dest=''
            Code package name is 'iron-pl'
    ------&gt; Uploading code package 'iron-pl'
            Code package uploaded with id='5277af07c7abc62bd5098755' and revision='4'
            Check 'https://hud.iron.io/tq/projects/5277a2b987a3b90005000044/code/5277af07c7abc62bd5098755' for more info
</code></pre>

<h2>Add tasks to the queue</h2>

<pre><code>$ iron_worker queue iron-pl -p '{"tags":["iron.io","perl"]}'
    ------&gt; Creating client
            Project 'ironing-board' with id='5277a2b987a3b90005000044'
    ------&gt; Queueing task
            Code package 'iron-pl' queued with id='5277ca9ed16f93360109d0aa'
            Check 'https://hud.iron.io/tq/projects/5277a2b987a3b90005000044/jobs/5277ca9ed16f93360109d0aa' for more info
</code></pre>

<h2>Check results</h2>

<p>We can either go straight to the web interface using the url listed above or use their management tool:</p>

<pre><code>    $ iron_worker log 5277ca9ed16f93360109d0aa
    ------&gt; Creating client
            Project 'ironing-board' with id='5277a2b987a3b90005000044'
    ------&gt; Getting log for task with id='5277ca9ed16f93360109d0aa'
    Iron-Play v0.0.1
    2013-11-04T16:26:10
    Environment: {
        HOME              "/task",
        LANG              "en_US.UTF-8",
        LD_LIBRARY_PATH   ".:./lib:./__debs__/usr/lib:./__debs__/usr/lib/x86_64-linux-gnu:./__debs__/lib:./__debs__/lib/x86_64-linux-gnu",
        LOGNAME           "nobody",
        MAIL              "/var/mail/nobody",
        OLDPWD            "/task",
        PATH              ".:./bin:./__debs__/usr/bin:./__debs__/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games",
        PWD               "/task",
        SHELL             "/bin/sh",
        SUDO_COMMAND      "/usr/bin/ruby run.rb --sleep 60 -e production -n 1 -j /mnt/iron-jail",
        SUDO_GID          1000,
        SUDO_UID          1000,
        SUDO_USER         "ubuntu",
        TERM              "unknown",
        USER              "nobody",
        USERNAME          "root"
    }
    Arguments: {
        -d         "/task/",
        -e         "production",
        -id        "5277ca9ed16f93360109d0aa",
        -payload   "/task/task_payload.json"
    }
    Payload (/task/task_payload.json): \ {
        tags   [
            [0] "iron.io",
            [1] "perl"
        ]
    }

    Top users for tag 'iron.io':
    AnaelFavre: 417
    thousandsofthem: 446
    Travis R: 6935

    Top users for tag 'perl':
    ikegami: 106098
    mpapec: 10324
    TLP: 40585

    Done.
</code></pre>

<h2>But, but..</h2>

<p>Of course, this example is not very useful, manually scheduling tasks and getting results from calling <code>iron_worker log &lt;id&gt;</code> is not really something interesting :&ndash;)</p>

<p>To be useful it would need to be automatically triggered by some event and produce usable results (updating a databse, notifying another service, etc..) but I assume you already know this if you&rsquo;re searching for how to run perl on IronWorker.</p>

<p>So, go crazy and drop me a hello on the comments bellow if this post was somehow helpful.</p>

<p>Cheers! \o/</p>
]]></content>
  </entry>
  
</feed>
